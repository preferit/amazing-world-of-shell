{"ast":null,"code":"import { useEffect, useState } from 'react';\nexport const useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = event => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n    };\n  }, [ref, handler]);\n};\nexport const useCallApi = api => {\n  const [hasError, setErrors] = useState(false);\n  const [data, setData] = useState({});\n\n  async function fetchData() {\n    const res = await fetch(api);\n    res.json().then(res => setData(res)).catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchData();\n  });\n\n  if (hasError) {\n    return JSON.stringify(hasError);\n  }\n\n  return JSON.stringify(data);\n};\nexport const useInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: event => {\n        setValue(event.target.value);\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/king/Development/the-amazing-world-of-shell/src/hooks/Hooks.jsx"],"names":["useEffect","useState","useOnClickOutside","ref","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener","useCallApi","api","hasError","setErrors","data","setData","fetchData","res","fetch","json","then","catch","err","JSON","stringify","useInput","initialValue","value","setValue","reset","bind","onChange"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACjDJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,QAAQ,GAAGC,KAAK,IAAI;AACxB,UAAI,CAACH,GAAG,CAACI,OAAL,IAAgBJ,GAAG,CAACI,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAApB,EAAwD;AACtD;AACD;;AACDL,MAAAA,OAAO,CAACE,KAAD,CAAP;AACD,KALD;;AAMAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCN,QAAvC;AAEA,WAAO,MAAM;AACXK,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CP,QAA1C;AACD,KAFD;AAGD,GAZQ,EAaP,CAACF,GAAD,EAAMC,OAAN,CAbO,CAAT;AAeD,CAhBM;AAkBP,OAAO,MAAMS,UAAU,GAAIC,GAAD,IAAS;AACjC,QAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBf,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACgB,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,EAAD,CAAhC;;AAEA,iBAAekB,SAAf,GAA2B;AACzB,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAACP,GAAD,CAAvB;AACAM,IAAAA,GAAG,CACAE,IADH,GAEGC,IAFH,CAEQH,GAAG,IAAIF,OAAO,CAACE,GAAD,CAFtB,EAGGI,KAHH,CAGSC,GAAG,IAAIT,SAAS,CAACS,GAAD,CAHzB;AAID;;AAEDzB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,SAAS;AACV,GAFQ,CAAT;;AAGA,MAAIJ,QAAJ,EAAc;AACZ,WAAOW,IAAI,CAACC,SAAL,CAAeZ,QAAf,CAAP;AACD;;AACD,SAAOW,IAAI,CAACC,SAAL,CAAeV,IAAf,CAAP;AACD,CAnBM;AAqBP,OAAO,MAAMW,QAAQ,GAAGC,YAAY,IAAI;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB9B,QAAQ,CAAC4B,YAAD,CAAlC;AAEA,SAAO;AACLC,IAAAA,KADK;AAELC,IAAAA,QAFK;AAGLC,IAAAA,KAAK,EAAE,MAAMD,QAAQ,CAAC,EAAD,CAHhB;AAILE,IAAAA,IAAI,EAAE;AACJH,MAAAA,KADI;AAEJI,MAAAA,QAAQ,EAAE5B,KAAK,IAAI;AACjByB,QAAAA,QAAQ,CAACzB,KAAK,CAACG,MAAN,CAAaqB,KAAd,CAAR;AACD;AAJG;AAJD,GAAP;AAWD,CAdM","sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = event => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler(event);\n    };\n    document.addEventListener('mousedown', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n    };\n  },\n    [ref, handler],\n  );\n};\n\nexport const useCallApi = (api) => {\n  const [hasError, setErrors] = useState(false);\n  const [data, setData] = useState({});\n\n  async function fetchData() {\n    const res = await fetch(api);\n    res\n      .json()\n      .then(res => setData(res))\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchData();\n  });\n  if (hasError) {\n    return JSON.stringify(hasError);\n  }\n  return JSON.stringify(data);\n}\n\nexport const useInput = initialValue => {\n  const [value, setValue] = useState(initialValue);\n\n  return {\n    value,\n    setValue,\n    reset: () => setValue(\"\"),\n    bind: {\n      value,\n      onChange: event => {\n        setValue(event.target.value);\n      }\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}